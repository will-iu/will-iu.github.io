<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>大学期间做过的课程设计及项目</title>
      <link href="/posts/f6351af5aed0.html"/>
      <url>/posts/f6351af5aed0.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文简单介绍，相关链接请前往 CSDN 浏览。</p></blockquote><span id="more"></span><p><a href="https://blog.csdn.net/qq_42748385/article/details/108986268?spm=1001.2014.3001.5501">基于 Node.js，socket.io 实现的匿名聊天室</a><br>针对 php 匿名聊天室的改版，相比上一版用到了前后端分离思想，使用 node.js 重写了后台代码，优化了前端页面样式，用到了 jquery，mongoose，express 框架，template 模板引擎，websocket 等一些新技术。<br>实现了图片文件上传、分页、定时删除、级联删除、倒计时、滚动条位置调整等功能。</p><p><img src="/../images/upload/20201011191041719.gif" alt="匿名聊天室大厅页面"></p><p><a href="https://blog.csdn.net/qq_42748385/article/details/103995128?spm=1001.2014.3001.5501">php 后端实现的匿名聊天室</a><br>一个开发了一周的 php 大作业，可以创建聊天室，输入聊天室名称及有效期，有效期过后，聊天室自动删除。设置每个聊天室的人数上限。设置每个用户限加入的聊天室数量。随机分配不重复昵称，有昵称随机动画。随时显示聊天室的剩余时间，js 实现。ajax 实现消息从数据库的获取。消息输入框使用富文本编辑器 ueditor。退出按钮，点击后退出聊天室。</p><p><img src="/../images/upload/20200121131821265.png" alt="php 匿名聊天室聊天页面"></p><p><a href="https://blog.csdn.net/qq_42748385/article/details/104001294?spm=1001.2014.3001.5501">oracle 校园卡消费系统</a><br>从数据表到 pl 存储过程的逻辑设计都思维缜密。</p><p><img src="/../images/upload/20210402113716675.png" alt="校园卡消费系统截图"></p><p><a href="https://blog.csdn.net/qq_42748385/article/details/107340543?spm=1001.2014.3001.5501">python 爬虫获取音乐热评</a><br>python 期末作业,一款可以爬取音乐网站歌曲热门评论的爬虫软件，只需要输入歌曲名，就会获得同名歌曲中排在第一的热门评论。并将爬取的结果在列表框中呈现，可以挑选自己喜欢的热评收藏到数据库，也可以把数据库中评论一键导出到 excel 表格中。<br>涉及到的技术有，爬虫、图形界面、数据库操作和表格操作。</p><p><img src="/../images/upload/20200714160535397.png" alt="热评爬取主页"></p><p><a href="https://blog.csdn.net/qq_42748385/article/details/108983389?spm=1001.2014.3001.5501">C 语言实现的数字拼图</a><br>很早之前的项目了，当时看了 c 语言实现的贪吃蛇和俄罗斯方块，就在空闲时间自己写了个数字拼图，用到的知识有改变控制台字体颜色，文件读写，计时器，多线程，算是我人生中第一个正式项目。</p><p><img src="/../images/upload/20201009175359674.png" alt="C 语言数字拼图主页"></p><p>win32 窗体版的文件管理系统（代码不慎丢失）<br>不知道用了多少运气，临近答辩期间，我在学校图书馆无意中发现了这本宝贝书籍，让我从只会控制台小黑框，成为能写出带窗体作业令我羡慕的别人。</p><p><img src="/../images/upload/48540923dd54564e6791768cb4de9c82d0584f8b.jpg" alt="winoows 程序设计【第五版】"></p>]]></content>
      
      
      <categories>
          
          <category> 前端之路 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript 基础知识点</title>
      <link href="/posts/4408df1f4a0c.html"/>
      <url>/posts/4408df1f4a0c.html</url>
      
        <content type="html"><![CDATA[<h2 id="变量声明"><a href="#变量声明" class="headerlink" title="变量声明"></a>变量声明</h2><h4 id="var声明特点"><a href="#var声明特点" class="headerlink" title="var声明特点"></a>var声明特点</h4><ul><li>函数作用域</li><li>可重复声明</li><li>变量提升</li><li>省略<code>var</code>则视为全局变量</li></ul><h4 id="let声明特点"><a href="#let声明特点" class="headerlink" title="let声明特点"></a>let声明特点</h4><ul><li><p>块级作用域</p></li><li><p>不可重复声明</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//都会报错SyntaxError</span></span><br><span class="line"><span class="keyword">let</span> name</span><br><span class="line"><span class="keyword">let</span> name</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> name</span><br><span class="line"><span class="keyword">var</span> name</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> name</span><br><span class="line"><span class="keyword">let</span> name</span><br></pre></td></tr></table></figure></li><li><p>暂时性死区代替变量提升</p></li><li><p>与<code>var</code>不同，使用<code>let</code>再全局作用域声明的变量不会成为Window对象属性</p></li></ul><h4 id="const声明特点"><a href="#const声明特点" class="headerlink" title="const声明特点"></a>const声明特点</h4><ul><li>块级作用域</li><li>不可重复声明</li><li>暂时性死区代替变量提升</li><li><strong>声明时必须同时初始化变量，且不可修改</strong></li></ul><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p><strong>简单数据类型</strong>：Undefined、Null、Boolean、Number、String和Symbol；</p><p><strong>复杂数据类型</strong>：Object (function)</p><h4 id="Boolean-转型函数的转换规则"><a href="#Boolean-转型函数的转换规则" class="headerlink" title="Boolean()转型函数的转换规则"></a>Boolean()转型函数的转换规则</h4><p>会转换为<code>false</code>的值有：<code>&#39;&#39;</code>、<code>0</code>、<code>NaN</code>、<code>null</code>、<code>undefined</code>，发现特点都是基本数据类型</p><p>需要注意<code>&#123;&#125;</code>和<code>[]</code>转换布尔值的结果都是<code>true</code>，</p><p>区分大小写，<code>True</code>不是布尔值。</p><h4 id="转换时机–隐式转换"><a href="#转换时机–隐式转换" class="headerlink" title="转换时机–隐式转换"></a>转换时机–隐式转换</h4><p>执行<code>if</code>语句时会自动进行布尔值的转换。</p><h4 id="Number数据类型"><a href="#Number数据类型" class="headerlink" title="Number数据类型"></a>Number数据类型</h4><table><thead><tr><th>NaN</th><th>非数值</th></tr></thead><tbody><tr><td>Infinity</td><td>正无穷大</td></tr><tr><td>-Infinity</td><td>负无穷大</td></tr><tr><td>Number.MIN_VALUE</td><td>最小值</td></tr><tr><td>Number.MAX_VALUE</td><td>最大值</td></tr></tbody></table><p><strong>判断是 0 还是 -0 ？</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">5</span>/<span class="number">0</span>); <span class="comment">// Infinity</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">5</span>/-<span class="number">0</span>); <span class="comment">// -Infinity</span></span><br><span class="line"><span class="comment">// 0、+0、-0相除返回NaN</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">0</span>/<span class="number">0</span>); <span class="comment">// NaN</span></span><br></pre></td></tr></table></figure><p>函数<code>isFinite()</code>用来判断是不是无穷大，</p><p>函数<code>isNaN()</code>用来判断是不是非数值，在进行判断前会先进行数值型的<strong>隐式转换</strong>，</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">isNaN</span>(<span class="title class_">NaN</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">isNaN</span>(<span class="number">10</span>)); <span class="comment">// false，转换为10</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">isNaN</span>(<span class="string">&#x27;10&#x27;</span>)); <span class="comment">// false，转换为10</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">isNaN</span>(<span class="string">&#x27;lwy&#x27;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">isNaN</span>(<span class="literal">true</span>)); <span class="comment">// false,转换为1</span></span><br></pre></td></tr></table></figure><h4 id="Number-和parseInt-转换规则对比"><a href="#Number-和parseInt-转换规则对比" class="headerlink" title="Number()和parseInt()转换规则对比"></a>Number()和parseInt()转换规则对比</h4><table><thead><tr><th>对照表</th><th>Number</th><th>parseInt</th></tr></thead><tbody><tr><td><code>true/false</code></td><td>1&#x2F;0</td><td>NaN</td></tr><tr><td><code>null</code></td><td>0</td><td>NaN</td></tr><tr><td><code>undefined</code></td><td>NaN</td><td>NaN</td></tr><tr><td><code>&#39;&#39;</code></td><td>0</td><td>NaN</td></tr><tr><td><code>&#39;114a&#39;</code></td><td>NaN</td><td>114</td></tr><tr><td><code>&#39;a114&#39;</code></td><td>NaN</td><td>NaN</td></tr><tr><td><code>&#39;22.2&#39;</code></td><td>22.2</td><td>22</td></tr></tbody></table><p>Number()和parseInt()都会省略前面的0，且能识别不同的整数格式；Number()如果发现字符串中存在非数值则直接返回NaN，parseInt()会在非数值处截断。</p><p>同时parseInt()接受第二个参数，用于指定底数（进制数）。</p><h4 id="toString-和String-对比"><a href="#toString-和String-对比" class="headerlink" title="toString()和String()对比"></a>toString()和String()对比</h4><p>除了<code>null</code>和<code>undefined</code>的所有值都有<code>toString()</code>方法，用法如<code>num.toString()</code>，并且它接受一个参数，表示以什么底数输出数值的字符串表示。</p><p><code>String()</code>在使用前会判断，如果值有<code>toString()</code>方法则调用，如果值是<code>null</code>返回<code>null</code>；值是<code>undefined</code>则返回<code>undefined</code>。</p><h2 id="类型检测"><a href="#类型检测" class="headerlink" title="类型检测"></a>类型检测</h2><h4 id="typeof操作符"><a href="#typeof操作符" class="headerlink" title="typeof操作符"></a><code>typeof</code>操作符</h4><p>可以检测<code>undefined</code>、<code>boolean</code>、<code>number</code>、<code>string</code>、<code>symbol</code>、<strong><code>function</code></strong>、<strong><code>object</code></strong> 共 7 种</p><p><strong>需要注意</strong>：</p><ol><li><p><code>typeof null</code>返回的结果是<code>object</code>，因为特殊值<code>null</code>被认为是对空对象的引用。</p></li><li><p>对于<strong>未声明</strong>和<strong>声明未初始化</strong>的变量进行<code>typeof</code>都是返回<code>undefined</code>。</p></li></ol><p>可以写两篇博客，一篇是ES6的特性，比如箭头函数（this，不能被new），let，const与var的区别，就是不能变量提升和重复声明等，这样好记一些。</p><p>第二篇，隐式转换盘点，出上述还有&#x3D;&#x3D;的四种转换规则。还有位运算的转换，比如~~</p><h2 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> arr1 = arr;</span><br><span class="line">    arr1.<span class="title function_">push</span>(<span class="number">3</span>);</span><br><span class="line">    <span class="keyword">return</span> arr1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"><span class="title function_">fn</span>(arr)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);</span><br></pre></td></tr></table></figure><p>js中数组作为参数传入到函数中时，会复制一个变量，但因为数组是引用类型，所以复制的变量存储的是地址（如果是基本类型，就是直接复制），也就是说，函数内外（实参与形参）引用的是同一个数组，当使用push等方法修改形参或另一个引用值相同的变量，函数外面数组也会变化，不过对形参赋值为另一个数组的地址时<code>arr=[]</code>，再进行push等修改不会有影响。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> arr1 = arr.<span class="title function_">slice</span>();</span><br><span class="line">    arr1.<span class="title function_">push</span>(<span class="number">3</span>);</span><br><span class="line">    <span class="keyword">return</span> arr1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>所以，想要是内部对数组的修改不影响外部，可以使用slice复制一个新的数组，引用了不同的地址，怎么修改都不会影响外面。<br>splice和slice好像有两种称呼。</p>]]></content>
      
      
      <categories>
          
          <category> 前端之路 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 汇总 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>8 种排序算法的代码实现</title>
      <link href="/posts/f82ca621b0af.html"/>
      <url>/posts/f82ca621b0af.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>找工作之际，重新学习了常见的排序算法，像看似无害的冒泡排序其实也有很多种优化方案，还有简单粗暴的选择排序，模拟抓牌的插入排序，弥补插入排序缺陷的希尔排序，使用了分治思想的归并排序，有点难搞的快速排序，模拟树状结构的堆排序，以及不按套路出牌的基数排序等。</p></blockquote><span id="more"></span><h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><h3 id="常规冒泡排序"><a href="#常规冒泡排序" class="headerlink" title="常规冒泡排序"></a>常规冒泡排序</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">bubbleSort</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="title class_">Array</span>.<span class="title function_">isArray</span>(arr) || arr.<span class="property">length</span> &lt;= <span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span> - <span class="number">1</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; arr.<span class="property">length</span> - <span class="number">1</span> - i; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">        [arr[j], arr[j + <span class="number">1</span>]] = [arr[j + <span class="number">1</span>], arr[j]];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二次优化后的冒泡排序"><a href="#二次优化后的冒泡排序" class="headerlink" title="二次优化后的冒泡排序"></a>二次优化后的冒泡排序</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">bubbleSort2</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="title class_">Array</span>.<span class="title function_">isArray</span>(arr) || arr.<span class="property">length</span> &lt;= <span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line">  <span class="keyword">let</span> lastIndex = arr.<span class="property">length</span> - <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span> - <span class="number">1</span>; i++) &#123;</span><br><span class="line">    <span class="comment">//一、外圈优化标志位，有交换则更改为false</span></span><br><span class="line">    <span class="keyword">let</span> flag = <span class="literal">true</span>;</span><br><span class="line">    <span class="comment">//二、内圈优化，对于已经有序的跳过比较</span></span><br><span class="line">    <span class="keyword">let</span> pos = lastIndex;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; pos; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">        [arr[j], arr[j + <span class="number">1</span>]] = [arr[j + <span class="number">1</span>], arr[j]];</span><br><span class="line">        flag = <span class="literal">false</span>;</span><br><span class="line">        <span class="comment">//记录最后一个交换的位置，其后已经有序</span></span><br><span class="line">        lastIndex = j;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//循环后仍然为true，说明上一圈已经有序</span></span><br><span class="line">    <span class="keyword">if</span> (flag) <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三次优化后的冒泡排序，减少-flag-标志位"><a href="#三次优化后的冒泡排序，减少-flag-标志位" class="headerlink" title="三次优化后的冒泡排序，减少 flag 标志位"></a>三次优化后的冒泡排序，减少 flag 标志位</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">bubbleSort3</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="title class_">Array</span>.<span class="title function_">isArray</span>(arr) || arr.<span class="property">length</span> &lt;= <span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line">  <span class="keyword">let</span> i = arr.<span class="property">length</span> - <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">while</span> (i &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">//初始值为0，当没有交换时，直接结束外圈循环</span></span><br><span class="line">    <span class="keyword">let</span> lastIndex = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">        [arr[j], arr[j + <span class="number">1</span>]] = [arr[j + <span class="number">1</span>], arr[j]];</span><br><span class="line">        <span class="comment">//记录最后一个交换的位置，其后已经有序</span></span><br><span class="line">        lastIndex = j;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//对于已经有序的，可以减少外圈循环次数</span></span><br><span class="line">    i = lastIndex;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>关于冒泡排序的总结，如果最小的数在数组的最后，那么优化与不优化效率一样</strong></p><h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">selectSort</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="title class_">Array</span>.<span class="title function_">isArray</span>(arr) || arr.<span class="property">length</span> &lt;= <span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span> - <span class="number">1</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> minPos = i;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = i + <span class="number">1</span>; j &lt; arr.<span class="property">length</span>; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (arr[j] &lt; arr[minPos]) &#123;</span><br><span class="line">        minPos = j;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    [arr[i], arr[minPos]] = [arr[minPos], arr[i]];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><h3 id="常规插入排序"><a href="#常规插入排序" class="headerlink" title="常规插入排序"></a>常规插入排序</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">insertSort</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="title class_">Array</span>.<span class="title function_">isArray</span>(arr) || arr.<span class="property">length</span> &lt;= <span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> j = i;</span><br><span class="line">    <span class="keyword">let</span> temp = arr[i];</span><br><span class="line">    <span class="keyword">while</span> (j &amp;&amp; arr[j - <span class="number">1</span>] &gt; temp) &#123;</span><br><span class="line">      arr[j] = arr[j - <span class="number">1</span>];</span><br><span class="line">      j--;</span><br><span class="line">    &#125;</span><br><span class="line">    arr[j] = temp;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二分查找优化的插入排序"><a href="#二分查找优化的插入排序" class="headerlink" title="二分查找优化的插入排序"></a>二分查找优化的插入排序</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">binarySearch</span>(<span class="params">arr, max, value</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> min = <span class="number">0</span>;</span><br><span class="line">  <span class="comment">//在min大于max返回的min必是大于value的下标</span></span><br><span class="line">  <span class="keyword">while</span> (min &lt;= max) &#123;</span><br><span class="line">    <span class="keyword">let</span> mid = <span class="title class_">Math</span>.<span class="title function_">floor</span>((min + max) / <span class="number">2</span>);</span><br><span class="line">    <span class="comment">//此处的等于是保证插入排序的稳定性</span></span><br><span class="line">    <span class="keyword">if</span> (arr[mid] &lt;= value) &#123;</span><br><span class="line">      min = mid + <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      max = mid - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> min;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">insertSort</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="title class_">Array</span>.<span class="title function_">isArray</span>(arr) || arr.<span class="property">length</span> &lt;= <span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> j = i;</span><br><span class="line">    <span class="keyword">let</span> temp = arr[i];</span><br><span class="line">    <span class="keyword">let</span> pos = <span class="title function_">binarySearch</span>(arr, i - <span class="number">1</span>, arr[i]);</span><br><span class="line">    <span class="comment">//下标及之后数组中的值，都要向后移动一位</span></span><br><span class="line">    <span class="keyword">while</span> (j &gt; pos) &#123;</span><br><span class="line">      arr[j] = arr[j - <span class="number">1</span>];</span><br><span class="line">      j--;</span><br><span class="line">    &#125;</span><br><span class="line">    arr[j] = temp;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hillSort</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="title class_">Array</span>.<span class="title function_">isArray</span>(arr) || arr.<span class="property">length</span> &lt;= <span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line">  <span class="keyword">for</span> (</span><br><span class="line">    <span class="keyword">let</span> gap = <span class="title class_">Math</span>.<span class="title function_">floor</span>(arr.<span class="property">length</span> / <span class="number">2</span>);</span><br><span class="line">    gap &gt;= <span class="number">1</span>;</span><br><span class="line">    gap = <span class="title class_">Math</span>.<span class="title function_">floor</span>(gap / <span class="number">2</span>)</span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = gap; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">let</span> j = i;</span><br><span class="line">      <span class="keyword">let</span> temp = arr[i];</span><br><span class="line">      <span class="keyword">while</span> (j - gap &gt;= <span class="number">0</span> &amp;&amp; arr[j - gap] &gt; temp) &#123;</span><br><span class="line">        arr[j] = arr[j - gap];</span><br><span class="line">        j -= gap;</span><br><span class="line">      &#125;</span><br><span class="line">      arr[j] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>希尔排序解决了，最小的数在后面需要进行 length-1 次比较 e 情况</strong></p><h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">mergeSort</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> length = arr.<span class="property">length</span>;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="title class_">Array</span>.<span class="title function_">isArray</span>(arr) || length &lt; <span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line">  <span class="keyword">if</span> (length == <span class="number">1</span>) <span class="keyword">return</span> arr;</span><br><span class="line">  <span class="keyword">let</span> mid = length &gt;&gt; <span class="number">1</span>,</span><br><span class="line">    leftArr = arr.<span class="title function_">slice</span>(<span class="number">0</span>, mid),</span><br><span class="line">    rightArr = arr.<span class="title function_">slice</span>(mid, length);</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">merge</span>(<span class="title function_">mergeSort</span>(leftArr), <span class="title function_">mergeSort</span>(rightArr));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">merge</span>(<span class="params">leftArr, rightArr</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> result = [],</span><br><span class="line">    lPos = <span class="number">0</span>,</span><br><span class="line">    rPos = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> (lPos &lt; leftArr.<span class="property">length</span> &amp;&amp; rPos &lt; rightArr.<span class="property">length</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (leftArr[lPos] &lt; rightArr[rPos]) &#123;</span><br><span class="line">      result.<span class="title function_">push</span>(leftArr[lPos++]);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      result.<span class="title function_">push</span>(rightArr[rPos++]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> (lPos &lt; leftArr.<span class="property">length</span>) &#123;</span><br><span class="line">    result.<span class="title function_">push</span>(leftArr[lPos++]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> (rPos &lt; rightArr.<span class="property">length</span>) &#123;</span><br><span class="line">    result.<span class="title function_">push</span>(rightArr[rPos++]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">quickSort</span>(<span class="params">arr, start = <span class="number">0</span>, end = arr.length - <span class="number">1</span></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (start &gt;= end) <span class="keyword">return</span> arr;</span><br><span class="line">  <span class="keyword">let</span> pivot = <span class="title function_">partition</span>(arr, start, end);</span><br><span class="line">  <span class="title function_">quickSort</span>(arr, start, pivot - <span class="number">1</span>);</span><br><span class="line">  <span class="title function_">quickSort</span>(arr, pivot + <span class="number">1</span>, end);</span><br><span class="line">  <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">partition</span>(<span class="params">arr, start, end</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> temp = arr[start];</span><br><span class="line">  <span class="keyword">while</span> (start &lt; end) &#123;</span><br><span class="line">    <span class="comment">//注意，有等号</span></span><br><span class="line">    <span class="keyword">while</span> (arr[end] &gt;= temp &amp;&amp; start &lt; end) &#123;</span><br><span class="line">      end--;</span><br><span class="line">    &#125;</span><br><span class="line">    arr[start] = arr[end];</span><br><span class="line">    <span class="comment">//注意，没有等号</span></span><br><span class="line">    <span class="keyword">while</span> (arr[start] &lt; temp &amp;&amp; start &lt; end) &#123;</span><br><span class="line">      start++;</span><br><span class="line">    &#125;</span><br><span class="line">    arr[end] = arr[start];</span><br><span class="line">  &#125;</span><br><span class="line">  arr[start] = temp;</span><br><span class="line">  <span class="keyword">return</span> start;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>快速排序，[2, 1, 1, 3] 可证明不稳定性</strong><br><a href="https://www.bilibili.com/video/BV1nb411W7vk?from=search&seid=5700855368353208829">排序学累了，看一段民族舞吧</a></p><h2 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">heapSort</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="title class_">Array</span>.<span class="title function_">isArray</span>(arr) || arr.<span class="property">length</span> &lt;= <span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line">  <span class="keyword">let</span> size = arr.<span class="property">length</span>;</span><br><span class="line">  <span class="comment">//构建大顶堆，从最后一个非叶子节点开始</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="title class_">Math</span>.<span class="title function_">floor</span>(size / <span class="number">2</span>) - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">    <span class="title function_">heapify</span>(arr, i, size);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = size - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">    <span class="comment">//把堆顶最大的节点与待排序节点中最后的节点交换</span></span><br><span class="line">    [arr[<span class="number">0</span>], arr[i]] = [arr[i], arr[<span class="number">0</span>]];</span><br><span class="line">    <span class="comment">//重新调整为大顶堆，已排序的节点不参与比较，所以i代表的size减小</span></span><br><span class="line">    <span class="title function_">heapify</span>(arr, <span class="number">0</span>, i);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">heapify</span>(<span class="params">arr, index, size</span>) &#123;</span><br><span class="line">  <span class="comment">//larger存父节点与两个子节点中最大的下标，剩下的左右子节点下标</span></span><br><span class="line">  <span class="keyword">let</span> larger = index,</span><br><span class="line">    leftPos = index * <span class="number">2</span> + <span class="number">1</span>,</span><br><span class="line">    rightPos = index * <span class="number">2</span> + <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">if</span> (leftPos &lt; size &amp;&amp; arr[leftPos] &gt; arr[larger]) &#123;</span><br><span class="line">    larger = leftPos;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (rightPos &lt; size &amp;&amp; arr[rightPos] &gt; arr[larger]) &#123;</span><br><span class="line">    larger = rightPos;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (index != larger) &#123;</span><br><span class="line">    [arr[index], arr[larger]] = [arr[larger], arr[index]];</span><br><span class="line">    <span class="title function_">heapify</span>(arr, larger, size);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">radixSort</span>(<span class="params">array</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> length = array.<span class="property">length</span>;</span><br><span class="line">  <span class="comment">// 如果不是数组或者数组长度小于等于1，直接返回，不需要排序</span></span><br><span class="line">  <span class="keyword">if</span> (!<span class="title class_">Array</span>.<span class="title function_">isArray</span>(array) || length &lt;= <span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line">  <span class="keyword">let</span> bucket = [],</span><br><span class="line">    max = array[<span class="number">0</span>],</span><br><span class="line">    loop;</span><br><span class="line">  <span class="comment">// 确定排序数组中的最大值</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (array[i] &gt; max) &#123;</span><br><span class="line">      max = array[i];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 确定最大值的位数</span></span><br><span class="line">  loop = (max + <span class="string">&quot;&quot;</span>).<span class="property">length</span>;</span><br><span class="line">  <span class="comment">// 初始化桶</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    bucket[i] = [];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; loop; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; length; j++) &#123;</span><br><span class="line">      <span class="keyword">let</span> str = array[j] + <span class="string">&quot;&quot;</span>;</span><br><span class="line">      <span class="keyword">if</span> (str.<span class="property">length</span> &gt;= i + <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> k = <span class="built_in">parseInt</span>(str[str.<span class="property">length</span> - <span class="number">1</span> - i]); <span class="comment">// 获取当前位的值，作为插入的索引</span></span><br><span class="line">        bucket[k].<span class="title function_">push</span>(array[j]);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 处理位数不够的情况，高位默认为 0</span></span><br><span class="line">        bucket[<span class="number">0</span>].<span class="title function_">push</span>(array[j]);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    array.<span class="title function_">splice</span>(<span class="number">0</span>, length); <span class="comment">// 清空旧的数组</span></span><br><span class="line">    <span class="comment">// 使用桶重新初始化数组</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">let</span> t = bucket[i].<span class="property">length</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; t; j++) &#123;</span><br><span class="line">        array.<span class="title function_">push</span>(bucket[i][j]);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> array;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>下次更新说明一下各种排序的时间复杂度，空间复杂度和稳定性，还有简单说一说什么场景使用哪种排序方式。</em></p><blockquote><p>参考：<br><em><a href="https://github.com/CavsZhouyou/Front-End-Interview-Notebook/blob/master/%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95.md">算法知识总结–CavsZhouyou&#x2F;Front-End-Interview-Notebook</a></em><br><em><a href="https://github.com/RayJune/Elegant-JavaScript-Sorting-Algorithms">优雅的 JavaScript 排序算法（ES6）–RayJune&#x2F;Elegant-JavaScript-Sorting-Algorithms</a></em></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端之路 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手写一个深拷贝代码</title>
      <link href="/posts/22817770fee0.html"/>
      <url>/posts/22817770fee0.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>深拷贝代码的层层进化</p></blockquote><span id="more"></span><h2 id="用递归的方式手写实现深拷贝"><a href="#用递归的方式手写实现深拷贝" class="headerlink" title="用递归的方式手写实现深拷贝"></a>用递归的方式手写实现深拷贝</h2><p>我们先来看网上最常见的深拷贝实现代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">deepClone</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> newObj = <span class="title class_">Array</span>.<span class="title function_">isArray</span>(obj) ? [] : &#123;&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">        <span class="keyword">let</span> item = obj[key];</span><br><span class="line">        <span class="keyword">if</span> (item <span class="keyword">instanceof</span> <span class="title class_">Object</span>) &#123;</span><br><span class="line">            newObj[key] = <span class="title function_">deepClone</span>(item);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            newObj[key] = item;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newObj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试用例</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Obj</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">num</span> = <span class="number">1</span>,</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">str</span> = <span class="string">&#x27;abc&#x27;</span>,</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">strObj</span> = <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&#x27;def&#x27;</span>),</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">reg</span> = <span class="regexp">/abc/</span>,</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">date</span> = <span class="keyword">new</span> <span class="title class_">Date</span>(),</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">arr</span> = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">child</span> = &#123;</span><br><span class="line">            <span class="attr">id</span>: <span class="string">&#x27;1-1&#x27;</span>,</span><br><span class="line">            <span class="attr">child</span>: &#123;</span><br><span class="line">                <span class="attr">id</span>: <span class="string">&#x27;1-1-1&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Obj</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">p</span> = <span class="string">&#x27;原型上的属性p&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> obj = <span class="keyword">new</span> <span class="title class_">Obj</span>();</span><br><span class="line"><span class="keyword">let</span> newObj = <span class="title function_">deepClone</span>(obj);</span><br><span class="line"><span class="comment">// 输出原对象</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">__proto__</span>.<span class="property">p</span>);</span><br><span class="line"><span class="comment">// 输出克隆对象</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newObj);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newObj.<span class="property">__proto__</span>.<span class="property">p</span>);</span><br></pre></td></tr></table></figure><p><img src="/../images/upload/deepClone1.png" alt="deepClone1"><br>可以发现它的特点有，<br><strong>对于正则表达式、日期类型无法拷贝,</strong><br><strong>原始值包装类型，如<code>new String(&#39;abc&#39;)</code>等不能正常拷贝，</strong><br><strong>非私有变量，<code>obj</code>原型上的属性不会继承，而是克隆在了自身属性上。</strong></p><p>针对以上情况，有如下改进版，<br>其中，高亮第4行、第7行解决了非私有变量的继承问题，<br>第13~16行对正则表达式和日期进行额外的判断处理。</p><figure class="highlight javascript"><figcaption><span>&#123;4,7,13-16&#125;</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">deepClone</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (obj === <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">// 创建一个使用同一个原型的空对象或数组</span></span><br><span class="line">    <span class="keyword">let</span> newObj = <span class="keyword">new</span> obj.<span class="property">constructor</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">        <span class="comment">// 如果是私有属性才拷贝</span></span><br><span class="line">        <span class="keyword">if</span> (obj.<span class="title function_">hasOwnProperty</span>(key)) &#123;</span><br><span class="line">            <span class="keyword">let</span> item = obj[key];</span><br><span class="line">            <span class="comment">// 如果是函数或基本类型，则直接引用或复制，</span></span><br><span class="line">            <span class="comment">// 否则就是对象类型（正则、日期、数组和对象,排除函数）</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">typeof</span> item !== <span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line">                newObj[key] = item;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (item <span class="keyword">instanceof</span> <span class="title class_">RegExp</span>) &#123;</span><br><span class="line">                newObj[key] = <span class="keyword">new</span> <span class="title class_">RegExp</span>(item);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (item <span class="keyword">instanceof</span> <span class="title class_">Date</span>) &#123;</span><br><span class="line">                newObj[key] = <span class="keyword">new</span> <span class="title class_">Date</span>(item);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                newObj[key] = <span class="title function_">deepClone</span>(item);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newObj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/../images/upload/deepClone2.png" alt="deepClone2"></p><p>但对于<code>new String(&#39;abc&#39;)</code>等，还是不能正常拷贝，<br>最后，我尝试进行了一些修改，</p><figure class="highlight javascript"><figcaption><span>&#123;16,20&#125;</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">deepClone</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (obj === <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">// 创建一个使用同一个原型的空对象或数组</span></span><br><span class="line">    <span class="keyword">let</span> newObj = <span class="keyword">new</span> obj.<span class="property">constructor</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">        <span class="comment">// 如果是私有属性才拷贝</span></span><br><span class="line">        <span class="keyword">if</span> (obj.<span class="title function_">hasOwnProperty</span>(key)) &#123;</span><br><span class="line">            <span class="keyword">let</span> item = obj[key];</span><br><span class="line">            <span class="comment">// 如果是函数或基本类型，则直接引用或复制，</span></span><br><span class="line">            <span class="comment">// 否则就是对象类型（正则、日期、数组、object和原始值包装类型,排除函数）</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">typeof</span> item !== <span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line">                newObj[key] = item;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (item <span class="keyword">instanceof</span> <span class="title class_">Array</span>) &#123;</span><br><span class="line">                newObj[key] = <span class="title function_">deepClone</span>(item);</span><br><span class="line">                <span class="comment">// 只有是对象类型中的Object才满足if条件</span></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(item) === <span class="string">&#x27;[object Object]&#x27;</span>) &#123;</span><br><span class="line">                newObj[key] = <span class="title function_">deepClone</span>(item);</span><br><span class="line">                <span class="comment">// 以下是正则、日期和各类包装类型，用其构造函数实例化一个原来值的实例，这样可以不用分别判断</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                newObj[key] = <span class="keyword">new</span> item.<span class="title function_">constructor</span>(<span class="params">item</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newObj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/../images/upload/deepClone3.png" alt="deepClone3"></p><p>以上三个版本，均没有实现对函数的深拷贝，只是引用，貌似也没有这个需求吧。。。<br>当然，以上的几种深拷贝方法没有绝对的对错，一切要看项目需要考虑到什么程度啦！</p><h2 id="结构赋值"><a href="#结构赋值" class="headerlink" title="结构赋值"></a>结构赋值</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对于正则、函数、日期不能拷贝</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">deepClone</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;...obj&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="通过-JSON-对象实现深拷贝"><a href="#通过-JSON-对象实现深拷贝" class="headerlink" title="通过 JSON 对象实现深拷贝"></a>通过 JSON 对象实现深拷贝</h2><blockquote><p>通过将对象转换为json字符串，再转换为对象会重新开辟空间</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对于正则、函数、日期不能拷贝</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">deepClone2</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> newObj = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj))；</span><br><span class="line">  <span class="keyword">return</span> newObj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="通过jQuery的extend方法实现深拷贝"><a href="#通过jQuery的extend方法实现深拷贝" class="headerlink" title="通过jQuery的extend方法实现深拷贝"></a>通过jQuery的extend方法实现深拷贝</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> array = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line"><span class="keyword">var</span> newArray = $.<span class="title function_">extend</span>(<span class="literal">true</span>,[],array);</span><br></pre></td></tr></table></figure><h2 id="Object-assign-拷贝"><a href="#Object-assign-拷贝" class="headerlink" title="Object.assign()拷贝"></a>Object.assign()拷贝</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">assign</span>(target, ...sources)</span><br></pre></td></tr></table></figure><h2 id="lodash函数库实现深拷贝"><a href="#lodash函数库实现深拷贝" class="headerlink" title="lodash函数库实现深拷贝"></a>lodash函数库实现深拷贝</h2><p>lodash很热门的函数库，提供了 lodash.cloneDeep()实现深拷贝</p>]]></content>
      
      
      <categories>
          
          <category> 前端之路 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript 数据结构处理</title>
      <link href="/posts/e46582285513.html"/>
      <url>/posts/e46582285513.html</url>
      
        <content type="html"><![CDATA[<h2 id="数组扁平化"><a href="#数组扁平化" class="headerlink" title="数组扁平化"></a>数组扁平化</h2><h4 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">flattenArray1</span>(<span class="params">array</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> arr = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">in</span> array) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(array[item])) &#123;</span><br><span class="line">            arr = arr.<span class="title function_">concat</span>(<span class="title function_">flattenArray1</span>(array[item]));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            arr.<span class="title function_">push</span>(array[item]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="转换为字符串"><a href="#转换为字符串" class="headerlink" title="转换为字符串"></a>转换为字符串</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">flattenArray2</span>(<span class="params">array</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> array.<span class="title function_">toString</span>().<span class="title function_">split</span>(<span class="string">&#x27;,&#x27;</span>).<span class="title function_">map</span>(<span class="function"><span class="params">item</span> =&gt;</span> +item);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="循环验证是否为数组"><a href="#循环验证是否为数组" class="headerlink" title="循环验证是否为数组"></a>循环验证是否为数组</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">flattenArray3</span>(<span class="params">array</span>) &#123;</span><br><span class="line">    <span class="keyword">while</span> (array.<span class="title function_">some</span>(<span class="function"><span class="params">item</span> =&gt;</span> <span class="title class_">Array</span>.<span class="title function_">isArray</span>(item))) &#123;</span><br><span class="line">        array = [].<span class="title function_">concat</span>(...array);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> array;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="flat-ES6"><a href="#flat-ES6" class="headerlink" title="flat(ES6)"></a>flat(ES6)</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">flattenArray4</span>(<span class="params">array</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> array.<span class="title function_">flat</span>(<span class="title class_">Infinity</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>更佳的解决方案看：<br><em><a href="https://github.com/mqyqingfeng/Blog/issues/36">JavaScript专题之数组扁平化</a></em></p></blockquote><h2 id="数组去重"><a href="#数组去重" class="headerlink" title="数组去重"></a>数组去重</h2><h4 id="Set-ES6"><a href="#Set-ES6" class="headerlink" title="Set(ES6)"></a>Set(ES6)</h4><p>利用了Set集合中元素只会出现一次特性，将数组转换为Set集合，去重后再利用解构赋值生成新的数组，并返回。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">unique1</span>(<span class="params">array</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> [...<span class="keyword">new</span> <span class="title class_">Set</span>(array)];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Object-键值对"><a href="#Object-键值对" class="headerlink" title="Object 键值对"></a>Object 键值对</h4><p>将数组中的所有元素作为对象的key和value存储在对象中，如果重复出现也不会创建新的记录。</p><blockquote><p>缺陷:<code>&#39;8&#39;</code>和<code>8</code>视为同一个值。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">unique2</span>(<span class="params">array</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> obj = &#123;&#125;;</span><br><span class="line">    array.<span class="title function_">map</span>(<span class="function"><span class="params">item</span> =&gt;</span> obj[item] = item);</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="title function_">values</span>(obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="map-indexOf"><a href="#map-indexOf" class="headerlink" title="map + indexOf"></a>map + indexOf</h4><p>新建一个数组A，map遍历数组B，如果在A中没找到，则添加到A中，<code>&amp;&amp;</code>短路特性(如果前半条件不满足，后半则不执行)。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">unique3</span>(<span class="params">array</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> arr = [];</span><br><span class="line">    array.<span class="title function_">map</span>(<span class="function"><span class="params">item</span> =&gt;</span> arr.<span class="title function_">indexOf</span>(item) == -<span class="number">1</span> &amp;&amp; arr.<span class="title function_">push</span>(item));</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="filter-lastIndexOf"><a href="#filter-lastIndexOf" class="headerlink" title="filter + lastIndexOf"></a>filter + lastIndexOf</h4><p>对于每一个元素从后往前找，如果找到的下标不等于本身的下标，则说明有另一个重复元素，返回false，被filter过滤掉。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">unique4</span>(<span class="params">array</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> array.<span class="title function_">filter</span>(<span class="function">(<span class="params">item, index</span>) =&gt;</span> array.<span class="title function_">lastIndex</span>(item) == index);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="排序-正则表达式"><a href="#排序-正则表达式" class="headerlink" title="排序 + 正则表达式"></a>排序 + 正则表达式</h4><p>将数组每一项转换为@结尾再拼接的字符串；对这个字符串可以使用正则表达式，把重复出现部分替换为单项；再还原为数组，去掉最后一个空数据；最后把数字转换为Number，字符串不变。<code>||</code>逻辑运算符在前半为true的情况下不执行后半部分，如果item是字符串，前半的结果是NaN，隐式转换为Boolean，结果是false，执行后半部分，返回字符串本身。</p><blockquote><p>缺陷:<code>&#39;8&#39;</code>和<code>8</code>视为同一个值，true最后以字符串表示。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">unique5</span>(<span class="params">array</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> str = array.<span class="title function_">sort</span>().<span class="title function_">join</span>(<span class="string">&#x27;@&#x27;</span>) + <span class="string">&#x27;@&#x27;</span>;</span><br><span class="line">    <span class="keyword">let</span> arr = str.<span class="title function_">replace</span>(<span class="regexp">/(\w@)\1*/g</span>, <span class="string">&quot;$1&quot;</span>).<span class="title function_">split</span>(<span class="string">&#x27;@&#x27;</span>).<span class="title function_">slice</span>(<span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> arr.<span class="title function_">map</span>(<span class="function"><span class="params">item</span> =&gt;</span> item - <span class="number">0</span> || item);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>更佳的解决方案看：<br><em><a href="https://github.com/mqyqingfeng/Blog/issues/27">JavaScript专题之数组去重</a></em></p></blockquote><h2 id="树转换"><a href="#树转换" class="headerlink" title="树转换"></a>树转换</h2><pre><code>let root = [&#123;    id: &#39;1&#39;&#125;, &#123;    id: &#39;2&#39;,    child: [&#123;            id: &#39;2-1&#39;        &#125;,        &#123;            id: &#39;2-2&#39;        &#125;    ]&#125;, &#123;    id: &#39;3&#39;,    child: [&#123;        id: &#39;3-1&#39;,        child: [&#123;            id: &#39;3-1-1&#39;        &#125;, &#123;            id: &#39;3-1-2&#39;        &#125;]    &#125;]&#125;];function foo(root) &#123;    let arr = [];    const fn = function (root, obj) &#123;        for (let key in root) &#123;            let item = root[key];            if (item.child) &#123;                fn(item.child, &#123;                    id: item.id,                    father: obj                &#125;);            &#125; else &#123;                arr.push(&#123;                    id: item.id,                    father: obj                &#125;);            &#125;        &#125;    &#125;    fn(root, null);    return arr;&#125;console.log(foo(root));</code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端之路 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式</title>
      <link href="/posts/68d70e1ccb91.html"/>
      <url>/posts/68d70e1ccb91.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>用正则表达式实现模板字符串匹配，<br>在javascript中，有模板语法，如<code>I like $&#123;a&#125; and $&#123;b&#125;.</code></p></blockquote><span id="more"></span><p>其中有变量，</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a=<span class="string">&#x27;apple&#x27;</span>,b=<span class="string">&#x27;banana&#x27;</span>;</span><br></pre></td></tr></table></figure><p>对于上述字符串，最终会生成，<br><code>I like apple and banana.</code></p><p>可以用以下代码模拟实现的原理，</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">str, obj</span>) &#123;</span><br><span class="line">    <span class="comment">//第二个参数支持回调函数，第一位是匹配的子串，第二位是捕获的字符串，因为正则里面只有一个括号，所以不需要p2；</span></span><br><span class="line">    <span class="comment">//需要注意的是，虽然用到了全局匹配会匹配两次，但每次匹配成功都会先调用回调函数。</span></span><br><span class="line">    <span class="keyword">return</span> str.<span class="title function_">replace</span>(<span class="regexp">/\$\&#123;(.*?)\&#125;/g</span>, <span class="function">(<span class="params">match, p1</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> obj[p1];</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">fn</span>(<span class="string">&#x27;i like $&#123;b&#125; and $&#123;a&#125;&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">a</span>: <span class="string">&#x27;apple&#x27;</span>,</span><br><span class="line">    <span class="attr">b</span>: <span class="string">&#x27;banana&#x27;</span></span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure><p>另一个案例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str1 = <span class="string">&#x27;&lt;div   class=&quot;father&quot;&gt;   123&lt;/div&gt;&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> str2 = str1.<span class="title function_">replace</span>(<span class="regexp">/\s+/g</span>, <span class="string">&#x27; &#x27;</span>).<span class="title function_">replace</span>(<span class="regexp">/\&gt;\s/</span>, <span class="string">&#x27;&gt;&#x27;</span>).<span class="title function_">replace</span>(<span class="regexp">/\&quot;/g</span>, <span class="string">&#x27;\\&quot;&#x27;</span>);</span><br></pre></td></tr></table></figure><p><em>下一期，如何掌握正则表达式</em></p>]]></content>
      
      
      <categories>
          
          <category> 前端之路 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一些自适应布局的实现</title>
      <link href="/posts/13e7aaae7c85.html"/>
      <url>/posts/13e7aaae7c85.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>上下固定，中间自适应<br>左右固定，中间自适应<br>一侧固定，另一侧自适应</p></blockquote><span id="more"></span><h2 id="1-上下固定，中部自适应布局"><a href="#1-上下固定，中部自适应布局" class="headerlink" title="1.上下固定，中部自适应布局"></a>1.上下固定，中部自适应布局</h2><p><strong>1. 绝对定位实现</strong></p><p>​原理：让中部绝对定位撑开剩余空间，此时中部会遮挡底部，所以也需要给上下设置为绝对定位。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">header</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>; <span class="comment">/*设置了绝对定位，宽就必须要写了*/</span></span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: yellow;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">main</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: pink;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">footer</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: gray;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2.  flex的grow实现</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span>,</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>; <span class="comment">/*很重要的一步，html也要写*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">flex-direction</span>: column;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">header</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: yellow;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">main</span> &#123;</span><br><span class="line">    <span class="attribute">flex-grow</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: pink;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">footer</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: gray;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-左固定，右自适应，两栏布局"><a href="#2-左固定，右自适应，两栏布局" class="headerlink" title="2.左固定，右自适应，两栏布局"></a>2.左固定，右自适应，两栏布局</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*方法一，浮动*/</span></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.left</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">500px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: pink;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.right</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">500px</span>;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: yellow;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*方法二，flex同上，利用flex-grow：1*/</span></span><br><span class="line"><span class="comment">/*方法三，绝对定位，同上，利用left和right撑开剩余空间</span></span><br></pre></td></tr></table></figure><h2 id="3-左右固定，中间自适应，三栏布局"><a href="#3-左右固定，中间自适应，三栏布局" class="headerlink" title="3.左右固定，中间自适应，三栏布局"></a>3.左右固定，中间自适应，三栏布局</h2><p>​方法一，左中右绝对定位，左<code>left:0</code>，右<code>right:0</code>，中间设置<code>left</code>和<code>right</code>撑开剩余空间，宽度默认填充。</p><p>​方法二，同上绝对定位，不同的地方在于，中间不使用绝对定位，使用<code>margin</code>代替<code>left</code>和<code>right</code>。</p><p>​方法三，flex布局，左右宽度固定，中间设置<code>flex-grow:1;</code></p><p>​方法四，浮动布局，左右宽度固定，左设置左浮动，右设置右浮动，中间正常只设置左右<code>margin</code>。需要注意，中间的 HTML 要写在最后，原因是如果在中间则会导致右浮动元素在下一行右浮动，只有先让浮动元素脱离文档流，使得最后写的中间元素上移，被浮动元素覆盖。浮动只会影响当前的或者是后面的标准流盒子，不会影响前面的标准流。</p><h2 id="4-圣杯、双飞翼布局"><a href="#4-圣杯、双飞翼布局" class="headerlink" title="4.圣杯、双飞翼布局"></a>4.圣杯、双飞翼布局</h2><p>圣杯、双飞翼布局的特点体现在html的结构上，css只是对元素进行相应调整，或用到上面提到的方法，来达到自适应布局。  </p><h2 id="5-实现宽高自适应的正方形"><a href="#5-实现宽高自适应的正方形" class="headerlink" title="5.实现宽高自适应的正方形"></a>5.实现宽高自适应的正方形</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*1.第一种方式是利用vw来实现*/</span></span><br><span class="line"><span class="selector-class">.square</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">10%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">10vw</span>;</span><br><span class="line">  <span class="attribute">background</span>: tomato;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*2.第二种方式是利用元素的margin/padding百分比是相对父元素width的性质来实现*/</span></span><br><span class="line"><span class="selector-class">.square</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">20%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding-top</span>: <span class="number">20%</span>;</span><br><span class="line">  <span class="attribute">background</span>: orange;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*3.第三种方式是利用子元素的margin-top的值来实现的*/</span></span><br><span class="line"><span class="selector-class">.square</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">30%</span>;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">background</span>: yellow;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.square</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端之路 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 汇总 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS 知识点汇总</title>
      <link href="/posts/80a98cde3701.html"/>
      <url>/posts/80a98cde3701.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>期待那一天，我可以用css画一幅《清明上河图》</p></blockquote><span id="more"></span><h2 id="1-盒子模型"><a href="#1-盒子模型" class="headerlink" title="1.盒子模型"></a>1.盒子模型</h2><p>W3C盒子模型：<code>width/height = content</code></p><p>IE盒子模型：<code>width/height = content + padding + border</code></p><h2 id="2-CSS-选择器"><a href="#2-CSS-选择器" class="headerlink" title="2.CSS 选择器"></a>2.CSS 选择器</h2><p><strong>选择器优先级</strong></p><table><thead><tr><th>选择器</th><th>计算权重</th></tr></thead><tbody><tr><td>继承，*（通配符）</td><td>0，0，0，0</td></tr><tr><td>标签选择器，伪元素选择器</td><td>0，0，0，1</td></tr><tr><td>类选择器，伪类选择器，属性选择器</td><td>0，0，1，0</td></tr><tr><td>ID选择器</td><td>0，1，0，0</td></tr><tr><td>行内样式</td><td>1，0，0，0</td></tr><tr><td>!important</td><td>∞</td></tr></tbody></table><p><strong>属性选择器</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=a]</span>&#123;</span><br><span class="line"><span class="comment">/*属性值为a*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type^=a]</span> <span class="comment">/*以a开头*/</span></span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type$=a]</span> <span class="comment">/*以a结尾*/</span></span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type*=a]</span> <span class="comment">/*包含a*/</span></span><br></pre></td></tr></table></figure><p><strong>伪类选择器</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:first-child</span>&#123;</span><br><span class="line">    <span class="comment">/*ul的第一个子元素*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:last-child</span> <span class="comment">/*ul的最后一个子元素*/</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child</span>(odd) <span class="comment">/*奇数位*/</span></span><br><span class="line"><span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child</span>(even) <span class="comment">/*偶数位*/</span></span><br><span class="line"><span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child</span>(-n+<span class="number">3</span>) <span class="comment">/*前3个子元素*/</span></span><br><span class="line"><span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child</span>(<span class="number">5</span>n) <span class="comment">/*每5个子元素*/</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span> <span class="selector-tag">span</span><span class="selector-pseudo">:nth-of-type</span>(<span class="number">1</span>) <span class="comment">/*选中第一个span*/</span></span><br><span class="line"><span class="selector-tag">div</span> apan<span class="selector-pseudo">:last-of-type</span> <span class="comment">/*匹配元素的最后一个子元素*/</span></span><br><span class="line"></span><br><span class="line">还有适用于表单的伪类选择器</span><br></pre></td></tr></table></figure><p><strong>伪元素选择器</strong></p><blockquote><p>插入文本，适用于字体图标的规范写法，before 在内容前面，after 在内容后面，必须有 content 属性。before 和 after 创建的是一个元素，但是属于行内元素，创建出来的元素在 Dom 中查找不到，所以称为伪元素</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">p</span>::after&#123;</span><br><span class="line">    <span class="attr">content</span>: <span class="string">&#x27;\ea50&#x27;</span>;</span><br><span class="line">    font-<span class="attr">family</span>: <span class="string">&#x27;icomoon&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-关于伪类-LVHA-的解释？"><a href="#3-关于伪类-LVHA-的解释？" class="headerlink" title="3.关于伪类 LVHA 的解释？"></a>3.关于伪类 LVHA 的解释？</h2><p>​a 标签有四种状态： （对顺序有要求）</p><table><thead><tr><th>:link</th><th>:visited</th><th>:hover</th><th>:active</th></tr></thead><tbody><tr><td>链接访问前</td><td>链接访问后</td><td>鼠标滑过</td><td>激活</td></tr></tbody></table><ol><li>当鼠标滑过a链接时，满足:link和:hover两种状态，要改变a标签的颜色，就必须将:hover伪类在:link伪类后面声明；  </li><li>当鼠标点击激活a链接时，同时满足:link、:hover、:active三种状态，要显示a标签激活时的样式（:active），必须将:active声明放到:link和:hover之后。因此得出LVHA这个顺序。</li></ol><h2 id="4-如何实现居中？"><a href="#4-如何实现居中？" class="headerlink" title="4.如何实现居中？"></a>4.如何实现居中？</h2><p><strong>水平居中：</strong></p><ol><li>最简单方法，元素必须设置宽度</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br></pre></td></tr></table></figure><ol start="2"><li>设置父元素内容居中对齐，子元素不能为块元素</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.father</span>&#123;</span><br><span class="line"><span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.child</span>&#123;</span><br><span class="line"><span class="attribute">display</span>: inline-block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>水平垂直居中：</strong></p><ol><li>绝对定位，先拉开，再平分左右外边距。</li></ol><blockquote><p>在左右内外边距、左右边框和内容宽度中，只有左右外边距和内容宽度可以设置 auto；对于块元素，如果没设置<code>margin: auto</code>，则右外边距强制设为<code>auto</code>，表现为填充剩余空间。</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.child</span>&#123;</span><br><span class="line"><span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>绝对定位，先定位至页面中心，再位移自身宽高的一半（translate 中的100%单位，是相对于本身的宽度和高度来进行计算的）</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.child</span>&#123;</span><br><span class="line"><span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>flex 布局，在父容器内实现水平垂直居中</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.father</span>&#123;</span><br><span class="line"><span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>行内元素的水平垂直居中：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.out</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">font-size</span>: <span class="number">0</span>; <span class="comment">/*去除行内元素间的空隙*/</span></span></span><br><span class="line"><span class="language-css">    <span class="attribute">text-align</span>: center; <span class="comment">/*水平居中*/</span></span></span><br><span class="line"><span class="language-css">    <span class="attribute">line-height</span>: <span class="number">200px</span>; <span class="comment">/*方法一，实现垂直居中*/</span></span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="comment">/* 方法二，实现垂直居中</span></span></span><br><span class="line"><span class="comment"><span class="language-css">.out::before &#123;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">    content: &#x27;&#x27;;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">    height: 100%; 使行内元素占全部空间</span></span></span><br><span class="line"><span class="comment"><span class="language-css">    display: inline-block;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">    vertical-align: middle;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">&#125; */</span></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.in</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: green;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">vertical-align</span>: middle;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;out&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;in&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="5-CSS属性继承"><a href="#5-CSS属性继承" class="headerlink" title="5. CSS属性继承"></a>5. CSS属性继承</h2><p>​对于继承性的属性，会在没有指定值的时候继承父元素的值；非继承属性则使用默认值。</p><p>​常见的继承属性有，字体系列属性<code>font-size</code>、<code>color</code>，文本相关属性<code>text-align</code>，表格的一些布局属性，列表属性<code>list-style</code>，光标属性<code>cursor</code>，元素可见性<code>visivility</code>。</p><p>​对于非继承属性，可以设置它的值为<code>inherit</code>，来强制继承父元素的属性。</p><p>​<strong>使用数值作为父元素属性值，子元素继承的是这个值；如果使用百分比值作为父元素属性值，子元素继承的是最终的计算值，不是百分比值。</strong></p><p><a href="https://www.jianshu.com/p/34044e3c9317">《CSS 有哪些属性可以继承？》</a></p><h2 id="6-CSS3-transform动画"><a href="#6-CSS3-transform动画" class="headerlink" title="6.CSS3 transform动画"></a>6.CSS3 transform动画</h2><p>​transform的优势在于不影响其他元素的位置，是相对于原位置进行的变化，仍占用原位置的空间。对行内元素无效。</p><p><strong>移动：</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">0</span>,<span class="number">100px</span>);</span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">0</span>,<span class="number">50%</span>); <span class="comment">/*百分比，相对自身*/</span></span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">translateY</span>(<span class="number">0</span>,<span class="number">100px</span>);</span><br></pre></td></tr></table></figure><p><strong>旋转：</strong> </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">45deg</span>);</span><br><span class="line"><span class="comment">/*设置旋转中心点,可选值top、bottom、left、right、center或百分数*/</span></span><br><span class="line"><span class="attribute">transform-origin</span>: left top; <span class="comment">/*左上角为中心*/</span></span><br></pre></td></tr></table></figure><p><strong>缩放：</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*小于1是缩小，大于1是放大*/</span></span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">2</span>);</span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">2</span>,<span class="number">2</span>);</span><br></pre></td></tr></table></figure><p><strong>简写：</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">200px</span>, <span class="number">0</span>) <span class="built_in">rotate</span>(<span class="number">360deg</span>) <span class="built_in">scale</span>(<span class="number">1.2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>动画：</strong> 1.定义动画；2.使用动画</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@keyframes</span> move&#123;</span><br><span class="line">      <span class="number">0%</span> &#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">0px</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="number">100%</span> &#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">500px</span>, <span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">animation</span>: move <span class="number">4s</span>; <span class="comment">/*动画名，持续时间*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-CSS3-弹性盒模型"><a href="#7-CSS3-弹性盒模型" class="headerlink" title="7.CSS3 弹性盒模型"></a>7.CSS3 弹性盒模型</h2><p>​通过将一个元素的<code>display</code>设置为<code>flex</code>，使它成为一个flex容器，它的所有子元素都会成为它的项目。</p><p>​容器有两个轴，一个是水平的主轴，另一个是与主轴垂直的交叉轴。</p><p>对于容器元素我们可以使用<code>flex-direction</code>来指定主轴的方向；<br>使用<code>justify-content</code>指定元素在主轴上的排列方式；<br>使用<code>align-items</code>指定元素在交叉轴的排列方式；<br>还可以使用<code>flex-wrap</code>来规定换行方式。</p><p>对于项目，可以使用<code>order</code>属性来指定项目的排列顺序，<br>使用<code>flex-grow</code>指定排列空间有剩余时项目的放大比例，<br>使用<code>flex-shrink</code>指定排列空间不足时项目的缩放比例。</p><h2 id="8-CSS创建三角形的原理"><a href="#8-CSS创建三角形的原理" class="headerlink" title="8.CSS创建三角形的原理"></a>8.CSS创建三角形的原理</h2><p>​将内容的宽高设置为0，通过边框均分正方形以获得三角形。如下代码是绘制<strong>等边三角形</strong>，将不需要显示的边宽度设置为0，使三角形充分利用块元素空间。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line"><span class="attribute">border-width</span>: <span class="number">0</span> <span class="number">10px</span> <span class="number">17px</span> <span class="number">10px</span>;</span><br><span class="line"><span class="attribute">border-style</span>: solid;</span><br><span class="line"><span class="attribute">border-color</span>: transparent transparent red transparent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="9-将溢出的文字用省略号显示？"><a href="#9-将溢出的文字用省略号显示？" class="headerlink" title="9.将溢出的文字用省略号显示？"></a>9.将溢出的文字用省略号显示？</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*1.先强制一行内显示文本*/</span>  </span><br><span class="line"><span class="attribute">white-space</span>: nowrap; </span><br><span class="line"><span class="comment">/*2. 超出的部分隐藏*/</span>   </span><br><span class="line"><span class="attribute">overflow</span>: hidden; </span><br><span class="line"><span class="comment">/*3. 文字用省略号替代超出的部分*/</span>   </span><br><span class="line"><span class="attribute">text-overflow</span>: ellipsis;</span><br></pre></td></tr></table></figure><p><strong>多行文本的溢出省略</strong></p><p>没有CSS的属性可以直接控制多行文本的省略显示，这里利用相对定位在最后面加上一个省略号</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">3em</span>; <span class="comment">/*容纳两行*/</span></span><br><span class="line"><span class="attribute">line-height</span>: <span class="number">1.5em</span>;</span><br><span class="line"><span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container</span><span class="selector-pseudo">::after</span>&#123;</span><br><span class="line"><span class="attribute">content</span>: <span class="string">&#x27;...&#x27;</span>;</span><br><span class="line"><span class="attribute">position</span>: absolute;</span><br><span class="line"><span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line"><span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line"><span class="attribute">padding</span>: <span class="number">0</span> <span class="number">5px</span>; <span class="comment">/*美观*/</span></span><br><span class="line"><span class="attribute">background-color</span>: <span class="number">#fff</span>; <span class="comment">/*挡住文字*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="10-多列等高的实现"><a href="#10-多列等高的实现" class="headerlink" title="10.多列等高的实现"></a>10.多列等高的实现</h2><p>​在父元素高度未知的情况下，希望并列的子元素背景高度等于子元素中最高的高度。</p><p>​利用padding-bottom&#x2F;margin-bottom正负值相抵，先扩大子元素的<code>padding-bottom: 9999px;</code>，补全缺失的背景，然后设置<code>margin-bottom: -9999px;</code>让多余的<code>padding</code>溢出，最后给父元素设置<code>overflow: hidden;</code>让溢出的部分隐藏。</p><p><a href="https://juejin.im/post/5b0fb34151882515662238fd">《前端应该掌握的 CSS 实现多列等高布局》</a></p><h2 id="11-让Chorme浏览器显示小于12px的文字"><a href="#11-让Chorme浏览器显示小于12px的文字" class="headerlink" title="11.让Chorme浏览器显示小于12px的文字"></a>11.让Chorme浏览器显示小于12px的文字</h2><p>​因为Chrome中文界面下默认会将小于12px的文本强制按照12px显示，所以利用C3变换中的<code>scale(0.5)</code>，但是对于<code>span</code>需要转换为块元素缩放才能生效。</p><h2 id="12-行内块元素之间的空隙是什么原因？怎么解决？"><a href="#12-行内块元素之间的空隙是什么原因？怎么解决？" class="headerlink" title="12.行内块元素之间的空隙是什么原因？怎么解决？"></a>12.行内块元素之间的空隙是什么原因？怎么解决？</h2><p>​<strong>原因</strong>：浏览器会把元素之间的连续多个空白符（空格、换行符、回车符等）转换为一个空格处理。这些元素之间的间距会随着字体大小而变化，当行内元素<code>font-size:16px;</code>时，间距为<code>8px</code>。常见的场景是，</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​<strong>解决办法</strong>：</p><ol><li>   将所有标签写在同一行,</li><li>   为元素设置<code>float: left;</code></li><li>   设置父元素的<code>font-size: 0;</code>，子元素的字体大小需要重新设置。</li></ol><h2 id="13-包含块的定义"><a href="#13-包含块的定义" class="headerlink" title="13.包含块的定义"></a>13.包含块的定义</h2><p>包含块（containing block）就是元素用来计算和定位的一个框。</p><p>涉及尺寸百分比相对的对象</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/All_About_The_Containing_Block">MDN包含块的解释</a></p><h2 id="14-绝对定位和非绝对定位元素的百分比计算的区别？"><a href="#14-绝对定位和非绝对定位元素的百分比计算的区别？" class="headerlink" title="14.绝对定位和非绝对定位元素的百分比计算的区别？"></a>14.绝对定位和非绝对定位元素的百分比计算的区别？</h2><p>​绝对定位元素的宽高百分比是相对临近祖先元素中<code>position</code>不为<code>static</code>的<code>padding box</code>来计算的，即<code>content+padding</code>。</p><p>​非绝对定位元素的宽高百分比是相对父元素的<code>content box</code>来计算的。</p><h2 id="15-图片使用base64编码的优缺点"><a href="#15-图片使用base64编码的优缺点" class="headerlink" title="15.图片使用base64编码的优缺点"></a>15.图片使用base64编码的优缺点</h2><p>​base64是一种图片处理格式，可将图片编码成一串长的字符串，在页面上显示的时候，使用该字符串代替图片的url属性。</p><p><strong>优点是</strong><br>可减少一个图片的<code>http</code>请求；</p><p><strong>缺点是</strong>  </p><ol><li>使用base64编码后，大小会比源文件大1&#x2F;3，如果把大图片编码到html&#x2F;css中，不仅会造成文件体积增加，影响文件的加载速度，还会增加浏览器对html&#x2F;css文件解析渲染的时间。  </li><li>使用base64编码的图片无法缓存，要缓存只能缓存包含base64的文件。</li></ol><h2 id="16-display、position和float的相互关系？"><a href="#16-display、position和float的相互关系？" class="headerlink" title="16.display、position和float的相互关系？"></a>16.display、position和float的相互关系？</h2><p>​<strong>优先级</strong>：<code>display&gt;position:absolute/fixed&gt;float</code></p><h2 id="17-外边距塌陷的表现和解决办法"><a href="#17-外边距塌陷的表现和解决办法" class="headerlink" title="17.外边距塌陷的表现和解决办法"></a>17.外边距塌陷的表现和解决办法</h2><p>​<strong>情况一：相邻式外边距塌陷</strong>，两个兄弟盒子，上面的盒子设置了margin-bottom，下面的盒子设置了margin-top，实际中不是取外边距之和，而是外边距中最大者。有个很好的比喻就是，有两个人在比剑。</p><p>​<strong>解决办法：</strong> 只设置一个外边距。</p><p>​<strong>情况二：嵌套式外边距塌陷</strong>，父元素的margin-top和子元素的margin-top发生重叠。</p><p>​<strong>解决办法：</strong></p><ol><li>   给父元素添加上边框；</li><li>   给父元素添加内边距；</li><li>   给父元素添加<code>overflow: hidden;</code></li><li>   创建BFC</li></ol><h2 id="18-BFC块级格式化上下文"><a href="#18-BFC块级格式化上下文" class="headerlink" title="18.BFC块级格式化上下文"></a>18.BFC块级格式化上下文</h2><p>​一个元素形成BFC后，它内部的元素产生的布局不会影响外部元素，同时外部元素的布局也不会影响到BFC中的内部元素。常用来创建BFC解决外边距塌陷和高度塌陷等问题。</p><p>​创建BFC的方法：浮动和绝对定位，<code>display</code>只设置为<code>inline-block、flex</code>等；<code>overflow</code>值不为<code>visible</code>。</p><h2 id="19-清除浮动clear"><a href="#19-清除浮动clear" class="headerlink" title="19.清除浮动clear"></a>19.清除浮动clear</h2><p>​清楚浮动可以让浮动的元素不与前面的浮动元素相邻，（不在同一行显示）也可以解决浮动元素导致的高度塌陷问题。</p><p>​常用的清楚浮动方法：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.clear</span><span class="selector-pseudo">::after</span>&#123;</span><br><span class="line"><span class="attribute">content</span>:<span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="attribute">display</span>:table;<span class="comment">/*也可以是&#x27;block&#x27;，或者是&#x27;list-item&#x27;*/</span></span><br><span class="line"><span class="attribute">clear</span>:both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://www.cnblogs.com/waisonlong/p/5822945.html">清除浮动文章</a></p><h2 id="20-浏览器如何解析CSS选择器？"><a href="#20-浏览器如何解析CSS选择器？" class="headerlink" title="20. 浏览器如何解析CSS选择器？"></a>20. 浏览器如何解析CSS选择器？</h2><p>​浏览器是从右到左匹配 CSS 表达式的，因此右侧的选择器也叫关键选择器，因为从右侧开始，只要发现选择器不匹配，就可以直接舍弃，避免了无用匹配；而如果从左侧开始匹配，到最后（最右）会发现很多元素不再匹配了，耗费性能。</p><h2 id="21-CSS3-的-all-属性"><a href="#21-CSS3-的-all-属性" class="headerlink" title="21.CSS3 的 all 属性"></a>21.CSS3 的 all 属性</h2><p>​all 属性是所有 css 属性的简写，不包括 <code>unicode-bidi</code>和<code>direction</code>，支持三个值，<code>initial,inherit,unset</code>。</p><p>​<code>initial </code>规定所有属性都使用初始默认值；<code>inherit </code>规定所有属性都继承父元素属性值；<code>unset</code> 会忽略用户给当前元素设置的所有 css 样式，然后可继承的样式使用继承值，不可继承的样式使用初始值。</p><h2 id="22-为什么不建议使用通配符"><a href="#22-为什么不建议使用通配符" class="headerlink" title="22.为什么不建议使用通配符*"></a>22.为什么不建议使用通配符*</h2><p>​使用通配符会把所有标签都遍历一遍，当网站较大时，会加大网站的运行负载；而且使用通配符是通常设置<code>padding,margin</code>为 0 ，但是并不是所有标签都有这两个属性，所有只对常见的元素初始化样式即可。</p><h2 id="23-rem和em单位"><a href="#23-rem和em单位" class="headerlink" title="23.rem和em单位"></a>23.rem和em单位</h2><p>​rem是基于html元素的字体大小来决定，比如设置了<code>html&#123;font-size:12px&#125;</code>则之后的<code>1rem</code>就等于<code>12px</code>，<code>2rem</code>就等于<code>24px</code>；</p><p>​em则根据此元素的<code>font-size</code>大小决定，如果此元素未设置<code>font-size</code>则继承父元素的属性。</p><h2 id="24-动画的最佳时间间隔是多少？"><a href="#24-动画的最佳时间间隔是多少？" class="headerlink" title="24.动画的最佳时间间隔是多少？"></a>24.动画的最佳时间间隔是多少？</h2><p>​因为多数显示设备的屏幕刷新率为60Hz，即1秒刷新60次，所以设置时间间隔为 1000ms &#x2F; 60 &#x3D; 16.7ms。</p><h2 id="25-CSSSprites精灵图"><a href="#25-CSSSprites精灵图" class="headerlink" title="25.CSSSprites精灵图"></a>25.CSSSprites精灵图</h2><p>​精灵图就是将多个小图片合并为一张大图，这样在进行文件请求时只需要发起一次请求就可以了，使用时需要利用<code>background,background-position</code>对目标图片定位，其中左上角为坐标原点，向右向下为负值。缺点是如果更新其中一个图片尺寸，可能对整张图片重新排版，定位。</p><h2 id="26-创建一个标准表格"><a href="#26-创建一个标准表格" class="headerlink" title="26.创建一个标准表格"></a>26.创建一个标准表格</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//创建的是没有行间距，列间距且有边框的表格</span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span> <span class="attr">cellpadding</span>=<span class="string">&quot;0&quot;</span> <span class="attr">cellspacing</span>=<span class="string">&quot;0&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">table</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border-collapse</span>: collapse;<span class="comment">/*重复边框合并*/</span></span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="27-各百分比单位的参照对象"><a href="#27-各百分比单位的参照对象" class="headerlink" title="27.各百分比单位的参照对象"></a>27.各百分比单位的参照对象</h2><p>公式：当前元素某CSS属性值 &#x3D; 基准 * 对应的百分比</p><ul><li><p><strong>元素的 position 为 relative 和 absolute 时，top和bottom、left和right基准分别为包含块的 height、width</strong></p></li><li><p>元素的 position 为 fixed 时，top和bottom、left和right基准分别为初始包含块（也就是视口）的 height、width，移动设备较为复杂，基准为 Layout viewport 的 height、width</p></li><li><p>元素的 height 和 width 设置为百分比时，基准分别为包含块的 height 和 width</p></li><li><p><strong>元素的 margin 和 padding 设置为百分比时，基准为包含块的 width（易错）</strong></p></li><li><p>元素的 border-width，不支持百分比</p></li><li><p>元素的 text-indent，基准为包含块的 width</p></li><li><p><strong>元素的 border-radius，基准为分别为自身的height、width</strong></p></li><li><p>元素的 background-size，基准为分别为自身的height、width</p></li><li><p><strong>元素的 translateX、translateY，基准为分别为自身的height、width</strong></p></li><li><p><strong>元素的 line-height，基准为自身的 font-size</strong></p></li><li><p>元素的 font-size，基准为父元素字体</p></li></ul><blockquote><p>参考：<br><em><a href="https://github.com/CavsZhouyou/Front-End-Interview-Notebook">CavsZhouyou&#x2F;Front-End-Interview-Notebook</a></em></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端之路 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 汇总 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML 知识点汇总</title>
      <link href="/posts/f43761f269ca.html"/>
      <url>/posts/f43761f269ca.html</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h2 id="1-DOCTYPE作用？"><a href="#1-DOCTYPE作用？" class="headerlink" title="1.DOCTYPE作用？"></a>1.DOCTYPE作用？</h2><p>规定浏览器用什么标准解析文档。如果声明了就按照W3C和ECMAscript(ECMA-262)制定的标准(标准模式)，否则按照浏览器厂商的标准解析(兼容模式)。</p><h2 id="2-SGML-、-HTML-、XML-和-XHTML-的区别？"><a href="#2-SGML-、-HTML-、XML-和-XHTML-的区别？" class="headerlink" title="2.SGML 、 HTML 、XML 和 XHTML 的区别？"></a>2.SGML 、 HTML 、XML 和 XHTML 的区别？</h2><p>SGML是标准通用标记语言，是一种定义电子文档结构和描述其内容的国际标准语言。<br>HTML是超文本标记语言，用于显示网页。<br>XML是可扩展的标记语言，与HTML的区别是可以自定义标签，而HTML标签固定且有限。<br>XHTML就是严格化的HTML，比如标签必须小写，必须闭合等。</p><h2 id="3-行内元素与块级元素的区别？"><a href="#3-行内元素与块级元素的区别？" class="headerlink" title="3.行内元素与块级元素的区别？"></a>3.行内元素与块级元素的区别？</h2><p><strong>块级元素</strong>：常见的块元素有<code>&lt;h1&gt;~&lt;h6&gt;、&lt;p&gt;、&lt;div&gt;、&lt;ul&gt;、&lt;ol&gt;、&lt;li&gt;</code>等</p><p>块级元素特点：</p><ol><li>独占一行</li><li>高度，宽度、外边距以及内边距都可以控制。</li><li>宽度默认是容器（父级宽度）的100%</li><li>是一个容器及盒子，里面可以放行内或者块级元素。</li></ol><p>p,h1,h2,h3,h4,h5,h6,dt，是文字类块级标签，里面不能放其他块级元素，如p 不能放div</p><p><strong>行内元素</strong>：常见的行内元素有<code>&lt;a&gt;、&lt;strong&gt;、&lt;b&gt;、&lt;em&gt;、&lt;i&gt;、&lt;del&gt;、&lt;s&gt;、&lt;ins&gt;、&lt;u&gt;、&lt;span&gt;</code>等</p><p>行内元素的特点：</p><ol><li>相邻行内元素在一行上，一行可以显示多个。</li><li>除了左右内外边距是有效的，其他高、宽、上下内外边距直接设置是无效的。</li><li>默认宽度就是它本身内容的宽度。</li><li>行内元素只能容纳文本或则其他行内元素。</li></ol><p>特殊情况a里面可以放块级元素，但是给a转换一下块级模式最安全。</p><p><strong>行内块元素的特点：</strong></p><p>（1）和相邻行内元素（行内块）在一行上,但是之间会有空白缝隙。一行可以显示多个 </p><p>（2）默认宽度就是它本身内容的宽度。 </p><p>（3）<strong>高度，行高、外边距以及内边距都可以控制。</strong></p><h2 id="4-空元素（自闭合标签）定义"><a href="#4-空元素（自闭合标签）定义" class="headerlink" title="4.空元素（自闭合标签）定义"></a>4.空元素（自闭合标签）定义</h2><p>空元素就是标签内没有内容的HTML标签，比如常见有<code>br hr img input link meta</code>。这类标签的正确写法为<code>&lt;br&gt; 或者 &lt;br/&gt;</code>，在XHTML中严格要求使用第二种写法。</p><h2 id="5-link标签的作用，与-import的区别？"><a href="#5-link标签的作用，与-import的区别？" class="headerlink" title="5.link标签的作用，与@import的区别？"></a>5.link标签的作用，与@import的区别？</h2><p>link 标签用于定义文档与外部资源的关系。</p><p>与@import最基本的区别是，link除了导入样式表还可以定义RSS、引入网站的图标；并且link引入的CSS在加载页面时同时加载，而@import只能在页面加载完毕后才加载。</p><h2 id="6-src和href的区别？"><a href="#6-src和href的区别？" class="headerlink" title="6.src和href的区别？"></a>6.src和href的区别？</h2><ul><li><p>请求资源类型不同：href 指向网络资源所在位置，建立和当前元素（锚点）或当前文档（链接）之间的联系。在请求 src 资源时会将其指向的资源下载并应用到文档中，比如 JavaScript 脚本，img 图片；</p></li><li><p>作用结果不同：href 用于在当前文档和引用资源之间确立联系；src 用于替换当前内容；</p></li><li><p>浏览器解析方式不同：当浏览器解析到src ，会暂停其他资源的下载和处理，直到将该资源加载、编译、执行完毕，图片和框架等也如此，类似于将所指向资源应用到当前内容。这也是为什么建议把 js 脚本放在底部而不是头部的原因。</p></li></ul><h2 id="7-浏览器内核及渲染的理解"><a href="#7-浏览器内核及渲染的理解" class="headerlink" title="7. 浏览器内核及渲染的理解"></a>7. 浏览器内核及渲染的理解</h2><p><strong>浏览器内核分为两部分</strong>：渲染引擎和JS引擎。但现在 JS 引擎越来越独立，内核就倾向于只指代渲染引擎。</p><p><strong>常见浏览器使用的内核</strong>：Chrome、Edge、Opera是Blink内核；IE是Trident内核；Firefox是Gecko内核；Safari是Webkit内核；国产浏览器多是双内核或者使用以上内核。</p><p><strong>浏览器渲染过程：</strong></p><blockquote><ol><li>解析收到的文档，根据文档定义（DTD+DOCTYPE)构建DOM树，DOM树由HTML元素及属性节点组成；</li><li>解析关联的CSS文件，生成CSS规则树；</li><li>根据DOM树和CSS规则树构建render渲染树，同时隐藏的DOM元素不会被插入到渲染树中；</li><li>布局，确定渲染树中各节点的位置坐标；</li><li>绘制，使用UI绘制组件显示渲染树内容。</li></ol></blockquote><p><strong>重绘</strong>：当渲染树中的元素只影响外观的属性改变时，比如color等样式改变则需要重新绘制页面。</p><p><strong>回流</strong>：当渲染树中的部分或全部元素的尺寸、布局、隐藏等改变时需要重新构建渲染树，再进行布局和绘制的操作。</p><p><strong>回流的成本很大，远大于重绘。导致回流的场景：</strong></p><p>​1. 添加或者删除可见的 DOM 元素；<br>​2. 元素尺寸改变——边距、填充、边框、宽度和高度<br>​3. 内容变化，比如用户在 input 框中输入文字<br>​4. 浏览器窗口尺寸改变——resize事件发生时<br>​5. 计算 offsetWidth 和 offsetHeight 属性<br>​6. 设置 style 属性的值<br>7. 当你修改网页的默认字体时。</p><p><strong>减少回流的方法：</strong></p><p><strong>1）不要一条一条地修改DOM的样式。与其这样，还不如预先定义好css的class，然后修改DOM的className。</strong></p><p><strong>2）把DOM离线后修改。如：</strong></p><ul><li>使用documentFragment 对象在内存里操作DOM</li><li>先把DOM给display:none(有一次reflow)，然后你想怎么改就怎么改。比如修改100次，然后再把他显示出来。</li><li>clone一个DOM结点到内存里，然后想怎么改就怎么改，改完后，和在线的那个的交换一下。</li></ul><p><strong>3）不要把DOM结点的属性值放在一个循环里当成循环里的变量</strong>。不然这会导致大量地读写这个结点的属性。</p><p><strong>4）为动画的HTML元件使用fixed或absoult的position</strong>，那么修改他们的CSS是不会reflow的。</p><p><strong>5）不要使用table布局</strong></p><h2 id="8-async和defer的作用和区别？"><a href="#8-async和defer的作用和区别？" class="headerlink" title="8.async和defer的作用和区别？"></a>8.async和defer的作用和区别？</h2><p>正常情况，如果在页面文档解析过程遇到 JS 脚本，会立即执行，如果是外引文件，则立即下载这个资源并执行，也就会阻塞了页面的解析。</p><p>如果script标签有<code>async=&quot;async&quot;</code> 这个属性会在网页解析的同时请求脚本资源，如果脚本加载好就立即执行，<strong>多个脚本的执行顺序无法保证，此执行过程也会阻塞网页解析。</strong></p><p>如果script标签有<code>defer=&quot;defer&quot;</code>这个属性也会在网页解析的同时请求脚本资源，只不过等待整个网页解析完成后再执行脚本文件。多个脚本按顺序执行。</p><h2 id="9-DOMContentLoaded事件和Load事件的区别？"><a href="#9-DOMContentLoaded事件和Load事件的区别？" class="headerlink" title="9. DOMContentLoaded事件和Load事件的区别？"></a>9. DOMContentLoaded事件和Load事件的区别？</h2><p>当HTML文档加载和解析完成后，触发DOMContentLoaded事件，无需等待样式表、图片等其他资源加载完成。</p><p>Load事件是当所有资源加载完成后触发的。</p><h2 id="10-HTML5的新特性"><a href="#10-HTML5的新特性" class="headerlink" title="10.HTML5的新特性"></a>10.HTML5的新特性</h2><ul><li>语义化标签</li><li>增强型表单</li><li><code>&lt;audio&gt;</code>和<code>&lt;video&gt;</code>的音媒体代替了flash</li><li>canvas和webGL对2D、3D图形的绘制</li><li>history API在vue路由中的使用</li><li>requestAnimationFrame解决了js动画时间精度问题</li><li>地理定位，可用于地图软件获取经纬度</li><li>本地存储localStorage和sessionStorage</li><li>webSocket用于实时直播、通信的全双工通讯技术</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">li</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">list-style</span>: none;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">figure</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">img</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 语义化标签的使用 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">nav</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">article</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">small</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;/<span class="name">small</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aside</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 图片+图片描述 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">figure</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;1.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;sunce&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">figcaption</span>&gt;</span>江东小霸王<span class="tag">&lt;/<span class="name">figcaption</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">figure</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 日期，有疑义 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">time</span> <span class="attr">datetime</span>=<span class="string">&quot;PT 1D 3H 59M 59S&quot;</span>&gt;</span>123<span class="tag">&lt;/<span class="name">time</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">aside</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 地区联动下拉框 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">list</span>=<span class="string">&quot;area&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">datalist</span> <span class="attr">id</span>=<span class="string">&quot;area&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;北京&quot;</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;上海&quot;</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;黑龙江&quot;</span>&gt;</span>黑龙江<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;杭州&quot;</span>&gt;</span>杭州<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;深圳&quot;</span>&gt;</span>深圳<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">datalist</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">section</span>&gt;</span><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">small</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">small</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// web存储</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// localStorage.name=&#x27;lwy&#x27;;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// console.log(localStorage.name)</span></span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="11-你对HTML语义化的理解？"><a href="#11-你对HTML语义化的理解？" class="headerlink" title="11.你对HTML语义化的理解？"></a>11.你对HTML语义化的理解？</h2><p>用正确的标签做正确的事，使用语义化的HTML标签能使页面的结构更清晰，即便是因为一些原因CSS样式不能正确显示，也能便于理解；<br>相比于使用类名说明语义，不同的开发者命名会有很大差异，而语义化的HTML标签则更加标准，统一，因此方便了程序的维护；也方便了搜索引擎的解析和SEO。</p><h2 id="12-b和strong的区别？i和em的区别？"><a href="#12-b和strong的区别？i和em的区别？" class="headerlink" title="12.b和strong的区别？i和em的区别？"></a>12.b和strong的区别？i和em的区别？</h2><p>从效果上看，b和strong都会将包围的文字加粗，i和em包围的文字会倾斜。<br>但strong和em是语义化的样式标签，除了文字外观上的改变，也有强调文本的作用，在使用阅读设备阅读网页时，strong还会重读。<br>em表示一般的强调文本，strong表示比em语义更强的强调文本。</p><h2 id="13-前端需要注意的SEO？"><a href="#13-前端需要注意的SEO？" class="headerlink" title="13.前端需要注意的SEO？"></a>13.前端需要注意的SEO？</h2><ul><li>合理的title、description、keywords：title中重要关键词靠前，description把页面内容高度概括，不要堆砌关键字；</li><li>语义化的 HTML 代码符合 W3C规范，更容易让搜索引擎理解网页；</li><li>重要内容的 HTML 代码放前面，尤其是h1和a标签里的内容；</li><li>搜索引擎不会抓取 iframe 和 js 输出的内容；</li><li>图片必须使用 alt 属性；</li><li>提高网站运行速度。</li></ul><h2 id="14-HTML5离线存储技术？"><a href="#14-HTML5离线存储技术？" class="headerlink" title="14.HTML5离线存储技术？"></a>14.HTML5离线存储技术？</h2><p>SessionStorage、LocalStorage用于客户端存储数据，如非关键字的Ajax数据；存储大小可达5M或更多；其中，localStorage存储的数据在浏览器关闭后不丢失，除非主动删除，sessionStorage存储的数据会在页面会话结束时清除，重新加载或恢复页面不会消失。</p><p>cookie用于记录用户身份，弥补http非持久链接的缺陷；存储大小不超过4k；设置的cookie只会在过期前一直有效，受Expires和max-age的影响（max-age优先）。</p><p>Application Cache用于存储静态资源，可离线访问网页。</p><h2 id="15-浏览器是怎么对-HTML5-的离线储存资源进行管理和加载的呢？"><a href="#15-浏览器是怎么对-HTML5-的离线储存资源进行管理和加载的呢？" class="headerlink" title="15.浏览器是怎么对 HTML5 的离线储存资源进行管理和加载的呢？"></a>15.浏览器是怎么对 HTML5 的离线储存资源进行管理和加载的呢？</h2><p>在线的情况下，浏览器发现html头部有manifest属性，就会请求manifest文件，如果是第一次访问，浏览器就会根据manifest文件中的内容下载相应资源进行离线存储。后续访问会先使用离线资源加载页面，然后对比服务器新的manifest文件，如果文件没有改变，不做任何操作；如果发生改变，就重新下载文件中的资源进行离线存储。</p><p>离线的情况下，浏览器就直接使用离线存储的资源。</p><h2 id="16-iframe的使用有哪些缺点？"><a href="#16-iframe的使用有哪些缺点？" class="headerlink" title="16.iframe的使用有哪些缺点？"></a>16.iframe的使用有哪些缺点？</h2><ol><li>iframe的挂载的脚本会阻塞主页面的onload事件，解决办法是使用js动态设置iframe的脚本；</li><li>搜索引擎不会解读iframe中的网页内容，不利于 SEO，因为爬虫遇到iframe会认为网站受到了攻击；</li><li>浏览器后退功能失效；</li><li>小型移动设备不能完全显示iframe框架。</li></ol><h2 id="17-Label标签的作用？"><a href="#17-Label标签的作用？" class="headerlink" title="17.Label标签的作用？"></a>17.Label标签的作用？</h2><p>当用户点击label标签时，会自动将焦点转到相关的表单控件上。</p><h2 id="18-如何实现浏览器内多个标签页之间的通信？"><a href="#18-如何实现浏览器内多个标签页之间的通信？" class="headerlink" title="18.如何实现浏览器内多个标签页之间的通信？"></a>18.如何实现浏览器内多个标签页之间的通信？</h2><ol><li>使用websocket让服务器做中介者，当任一方发送消息时，服务器向所有建立连接的标签页推送消息；</li><li>使用localStorage，因为一个浏览器不同标签页公用一个localStorage，当一方对localStorage进行修改，另一方就可以监听到localStorage变化；</li><li>使用postMessage进行通信。</li></ol><h2 id="19-页面可见性（Page-Visbility-API）的用途？"><a href="#19-页面可见性（Page-Visbility-API）的用途？" class="headerlink" title="19.页面可见性（Page Visbility API）的用途？"></a>19.页面可见性（Page Visbility API）的用途？</h2><p>​通过监听网页的可见性，节省浏览器或服务器的资源。比如当用户不看网页，我们可以停止对服务器的轮询，网页动画，正在播放的音频或视频。</p><h2 id="20-如何在页面上实现一个圆形的可点击区域？"><a href="#20-如何在页面上实现一个圆形的可点击区域？" class="headerlink" title="20.如何在页面上实现一个圆形的可点击区域？"></a>20.如何在页面上实现一个圆形的可点击区域？</h2><ol><li>使用area标签可以设定一个圆形且带有坐标的点击域；</li><li>使用border-radius：50%；设置一个div块；</li><li>使用js，监听点击事件，计算鼠标点击位置是否在规定的圆形区域内。</li></ol><h2 id="21-title和alt的区别？"><a href="#21-title和alt的区别？" class="headerlink" title="21.title和alt的区别？"></a>21.title和alt的区别？</h2><p>​alt 是给搜索引擎识别，在图像无法显示时的替代文本；title 是关于元素的注释信息，主要是给用户解读。当鼠标放到文字或是图片上时有 title 文字显示。</p><h2 id="22-Canvas和SVG有什么区别？"><a href="#22-Canvas和SVG有什么区别？" class="headerlink" title="22.Canvas和SVG有什么区别？"></a>22.Canvas和SVG有什么区别？</h2><p>​Canvas 是使用 JavaScript 绘制的 2D 图形，因为属于位图，所以对图形进行缩放时会出现锯齿；</p><p>​SVG 是使用 XML描述 2D 图形的语言，其保存的是图形的绘制方法，因此进行缩放时不会失真。</p><h2 id="23-渐进增强和优雅降级的定义？"><a href="#23-渐进增强和优雅降级的定义？" class="headerlink" title="23.渐进增强和优雅降级的定义？"></a>23.渐进增强和优雅降级的定义？</h2><p>​渐进增强：针对低版本浏览器进行构建页面，保证最基本的功能，然后再针对高级浏览器进行效果、交互等改进和追加功能达到更好的用户体验。</p><p>​优雅降级：一开始就根据高版本浏览器构建完整的功能，然后再针对低版本浏览器进行兼容。</p><h2 id="24-css-reset-和-normalize-css-有什么区别？"><a href="#24-css-reset-和-normalize-css-有什么区别？" class="headerlink" title="24. css reset 和 normalize.css 有什么区别？"></a>24. css reset 和 normalize.css 有什么区别？</h2><p>​reset 的作用是把所有浏览器的默认样式重置掉，解决浏览器间的样式不兼容；但存在一些性能上的问题，比如复杂的继承链，而且也重置了一些不必要的样式。</p><p>​normalize.css 在保留浏览器自带样式的基础上，进行调整，使得浏览器间的样式表现一致，并且修复了一些浏览器的bug。</p><h2 id="25-disabled-和-readonly-的区别？"><a href="#25-disabled-和-readonly-的区别？" class="headerlink" title="25.disabled 和 readonly 的区别？"></a>25.disabled 和 readonly 的区别？</h2><p>​disabled 指禁用 input 。input内容不会随着表单提交。</p><p>​readonly 规定输入字段为只读。input 内容会随着表单提交。</p><p>​但两者都能通过 js 脚本更改输入框的值。</p><h2 id="26-前端性能优化"><a href="#26-前端性能优化" class="headerlink" title="26.前端性能优化"></a>26.前端性能优化</h2><p><strong>页面内容优化：</strong></p><ol><li>通过文件合并，CSS 雪碧图等方式减少 HTTP 请求数，</li><li>延迟加载，按需加载初次请求网页的资源，后续资源用户访问时在请求，</li><li>缓存加载过的资源，如果资源不常用则可以从 DOM 树中移除，</li><li>预加载</li></ol><p><strong>服务器优化：</strong></p><ol><li>使用 CDN（内容分发网络）利用就近的服务器返回用户请求的资源，减轻网络拥塞，提高资源请求时的响应速度，</li><li>服务端使用 Gzip、Deflate 等方式对传输的资源进行压缩，减少文件的体积，</li><li>尽可能减少 cookie 的大小，通过将静态资源分配到其他域名下，避免对静态资源请求时携带不必要的 cookie ,</li></ol><p><strong>代码优化：</strong></p><ol><li>把样式表放在页面的 head 标签中，减少页面的首次渲染的时间，</li><li>避免使用 @import 标签，</li><li>尽量把 js 脚本放在页面底部或使用 defer 或 async 属性，避免脚本的加载和执行阻塞页面的渲染，</li><li>对 JavaScript 和 CSS 的文件进行压缩，减少文件的体积。</li></ol><blockquote><p><strong>基础优化（开发阶段）</strong><br>比较基础的优化像，将css，script写在外部，将script脚本放在最下面或者使用defer和async异步延迟加载资源；css中不用通配符，样式值为0时不需要单位；使用c3动画代替js动画，使用事件代理减少监听事件的个数。<br>图片格式的选择，比如背景图用png格式，商品图用jpg格式等。</p><p><strong>请求优化</strong><br>减少HTTP请求的数量，比如对图片使用精灵图技术，base64编码；减少HTTP请求的大小，gzip压缩，js混淆，css压缩，图片压缩（缩略图）<br>对dns缓存，减少dns的查找；使用内容分发网络CDN请求，同时不会携带cookie</p><p><strong>进阶优化</strong><br>使用预加载，提前缓存资源提高页面流畅性；使用懒加载减轻服务器压力，同时减少dom节点，提高流畅性。对于懒加载之前的图片，可将其从dom树中移除，缓存起来，需要时再添加回去，这样可减少回流耗费的资源。<br>减少回流次数的一些方法。</p></blockquote><h2 id="27-前端优化：请求静态资源时不携带cookie"><a href="#27-前端优化：请求静态资源时不携带cookie" class="headerlink" title="27.前端优化：请求静态资源时不携带cookie"></a>27.前端优化：请求静态资源时不携带cookie</h2><p>​网站向服务器请求的时候会自动携带cookie，如果是在请求静态资源，不需要cookie的情况，会浪费流量，请求变慢。所以，把静态文件放在CDN，因为跨域请求不会携带cookie，这样可降低请求头的大小，减少请求时间。</p><h2 id="28-图片格式的选择"><a href="#28-图片格式的选择" class="headerlink" title="28.图片格式的选择"></a>28.图片格式的选择</h2><p><strong>矢量图与位图</strong>   </p><p>​矢量图是点线面通过计算的方式绘制的图像，优点是文件小、放大不会失真。位图是像素点拼接的图像，如jpg、png、gif等。位图的优点是显示的色彩层次丰富，缺点是文件大，放大图像会失真。</p><p><strong>有损压缩和无损压缩</strong></p><p>​有损压缩jpg格式，会去掉容易被人们忽视的细节，然后使用附近的颜色利用渐变进行补充，不支持透明。无损压缩png格式，原理是先判断图象上哪些区域颜色是相同的，然后对出现的颜色进行索引，节省空间。如果图像上出现的颜色大于图片可以保存的颜色数量时就会丢失部分图像信息，所以有PNG8和PNG24可以存储更多的颜色。</p><p><strong>综上</strong></p><p>​颜色较多的采用JPG存储，而颜色简单对比强烈采用PNG。在网页开发中，容器的背景、按钮、导航的背景等应该尽量用PNG格式，保证设计品质；其他一些内容元素，如广告Banner、商品图片等对质量要求不是特别苛刻的，则可以用JPG去进行存储从而降低文件大小。</p><h2 id="29-Waterfall-网页瀑布图"><a href="#29-Waterfall-网页瀑布图" class="headerlink" title="29.Waterfall 网页瀑布图"></a>29.Waterfall 网页瀑布图</h2><p>瀑布图是浏览器调试器中的一项工具，用来预览资源从请求到渲染消耗的时间，也可以用来排查页面卡顿的原因等。</p><h2 id="30-扫描二维码登录网页原理？"><a href="#30-扫描二维码登录网页原理？" class="headerlink" title="30.扫描二维码登录网页原理？"></a>30.扫描二维码登录网页原理？</h2><p>​浏览器获得一个临时 id， 通过长连接等待客户端扫描带有此 id 的二维码后，从长连接中获得客户端上报给服务器的账号信息进行展示。</p><p>​客户端点击确认后，获得服务器授权的令牌，进行随后的信息交互过程。当超时、网络断开、其他设备登录后，此令牌失效，从而对授权过程形成有效的安全防护。</p><h2 id="31-从输入URL到打开页面发生了什么？"><a href="#31-从输入URL到打开页面发生了什么？" class="headerlink" title="31.从输入URL到打开页面发生了什么？"></a>31.从输入URL到打开页面发生了什么？</h2><p>先确定输入的 URL 是否为本机地址，如果是则直接定位本机资源；<br>根据 URL 获取 IP 地址：</p><ol><li>查看浏览器缓存是否有对应 IP 地址规则；</li><li>查看本地 hosts 文件；</li><li>查看本地路由器是否缓存；</li><li>向本地 DNS 服务器发送域名解析请求；</li><li>向上级 DNS 服务器查询解析域名。</li></ol><p>三次握手建立 HTTP 连接，发起请求;（从应用层到服务器应用层）<br>服务器发送响应报文，识别状态码，四次挥手结束连接;<br>解析获取的 HTML 文档，进行页面渲染。</p><p>了解cache-control，last-modified，etag。httpheader的属性，Cache-control属性，max-age，s-maxage，private，public，no-cache，no-store。</p><blockquote><p>参考：<br><em><a href="https://github.com/CavsZhouyou/Front-End-Interview-Notebook">CavsZhouyou&#x2F;Front-End-Interview-Notebook</a></em></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端之路 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 汇总 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
